// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_control.proto

#ifndef PROTOBUF_messages_5fcontrol_2eproto__INCLUDED
#define PROTOBUF_messages_5fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_5fcontrol_2eproto();
void protobuf_AssignDesc_messages_5fcontrol_2eproto();
void protobuf_ShutdownFile_messages_5fcontrol_2eproto();

class ControlPackage;

enum ControlPackage_FieldSide {
  ControlPackage_FieldSide_Left = 0,
  ControlPackage_FieldSide_Right = 1
};
bool ControlPackage_FieldSide_IsValid(int value);
const ControlPackage_FieldSide ControlPackage_FieldSide_FieldSide_MIN = ControlPackage_FieldSide_Left;
const ControlPackage_FieldSide ControlPackage_FieldSide_FieldSide_MAX = ControlPackage_FieldSide_Right;
const int ControlPackage_FieldSide_FieldSide_ARRAYSIZE = ControlPackage_FieldSide_FieldSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlPackage_FieldSide_descriptor();
inline const ::std::string& ControlPackage_FieldSide_Name(ControlPackage_FieldSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlPackage_FieldSide_descriptor(), value);
}
inline bool ControlPackage_FieldSide_Parse(
    const ::std::string& name, ControlPackage_FieldSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlPackage_FieldSide>(
    ControlPackage_FieldSide_descriptor(), name, value);
}
enum ControlPackage_TeamColor {
  ControlPackage_TeamColor_Yellow = 0,
  ControlPackage_TeamColor_Blue = 1
};
bool ControlPackage_TeamColor_IsValid(int value);
const ControlPackage_TeamColor ControlPackage_TeamColor_TeamColor_MIN = ControlPackage_TeamColor_Yellow;
const ControlPackage_TeamColor ControlPackage_TeamColor_TeamColor_MAX = ControlPackage_TeamColor_Blue;
const int ControlPackage_TeamColor_TeamColor_ARRAYSIZE = ControlPackage_TeamColor_TeamColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlPackage_TeamColor_descriptor();
inline const ::std::string& ControlPackage_TeamColor_Name(ControlPackage_TeamColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlPackage_TeamColor_descriptor(), value);
}
inline bool ControlPackage_TeamColor_Parse(
    const ::std::string& name, ControlPackage_TeamColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlPackage_TeamColor>(
    ControlPackage_TeamColor_descriptor(), name, value);
}
// ===================================================================

class ControlPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ControlPackage) */ {
 public:
  ControlPackage();
  virtual ~ControlPackage();

  ControlPackage(const ControlPackage& from);

  inline ControlPackage& operator=(const ControlPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlPackage& default_instance();

  void Swap(ControlPackage* other);

  // implements Message ----------------------------------------------

  inline ControlPackage* New() const { return New(NULL); }

  ControlPackage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlPackage& from);
  void MergeFrom(const ControlPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ControlPackage_FieldSide FieldSide;
  static const FieldSide Left =
    ControlPackage_FieldSide_Left;
  static const FieldSide Right =
    ControlPackage_FieldSide_Right;
  static inline bool FieldSide_IsValid(int value) {
    return ControlPackage_FieldSide_IsValid(value);
  }
  static const FieldSide FieldSide_MIN =
    ControlPackage_FieldSide_FieldSide_MIN;
  static const FieldSide FieldSide_MAX =
    ControlPackage_FieldSide_FieldSide_MAX;
  static const int FieldSide_ARRAYSIZE =
    ControlPackage_FieldSide_FieldSide_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FieldSide_descriptor() {
    return ControlPackage_FieldSide_descriptor();
  }
  static inline const ::std::string& FieldSide_Name(FieldSide value) {
    return ControlPackage_FieldSide_Name(value);
  }
  static inline bool FieldSide_Parse(const ::std::string& name,
      FieldSide* value) {
    return ControlPackage_FieldSide_Parse(name, value);
  }

  typedef ControlPackage_TeamColor TeamColor;
  static const TeamColor Yellow =
    ControlPackage_TeamColor_Yellow;
  static const TeamColor Blue =
    ControlPackage_TeamColor_Blue;
  static inline bool TeamColor_IsValid(int value) {
    return ControlPackage_TeamColor_IsValid(value);
  }
  static const TeamColor TeamColor_MIN =
    ControlPackage_TeamColor_TeamColor_MIN;
  static const TeamColor TeamColor_MAX =
    ControlPackage_TeamColor_TeamColor_MAX;
  static const int TeamColor_ARRAYSIZE =
    ControlPackage_TeamColor_TeamColor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TeamColor_descriptor() {
    return ControlPackage_TeamColor_descriptor();
  }
  static inline const ::std::string& TeamColor_Name(TeamColor value) {
    return ControlPackage_TeamColor_Name(value);
  }
  static inline bool TeamColor_Parse(const ::std::string& name,
      TeamColor* value) {
    return ControlPackage_TeamColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ControlPackage.FieldSide field_side = 1;
  bool has_field_side() const;
  void clear_field_side();
  static const int kFieldSideFieldNumber = 1;
  ::ControlPackage_FieldSide field_side() const;
  void set_field_side(::ControlPackage_FieldSide value);

  // required .ControlPackage.TeamColor team_color = 2;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 2;
  ::ControlPackage_TeamColor team_color() const;
  void set_team_color(::ControlPackage_TeamColor value);

  // required int32 id_GK = 3;
  bool has_id_gk() const;
  void clear_id_gk();
  static const int kIdGKFieldNumber = 3;
  ::google::protobuf::int32 id_gk() const;
  void set_id_gk(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ControlPackage)
 private:
  inline void set_has_field_side();
  inline void clear_has_field_side();
  inline void set_has_team_color();
  inline void clear_has_team_color();
  inline void set_has_id_gk();
  inline void clear_has_id_gk();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int field_side_;
  int team_color_;
  ::google::protobuf::int32 id_gk_;
  friend void  protobuf_AddDesc_messages_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_messages_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_messages_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static ControlPackage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlPackage

// required .ControlPackage.FieldSide field_side = 1;
inline bool ControlPackage::has_field_side() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlPackage::set_has_field_side() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlPackage::clear_has_field_side() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlPackage::clear_field_side() {
  field_side_ = 0;
  clear_has_field_side();
}
inline ::ControlPackage_FieldSide ControlPackage::field_side() const {
  // @@protoc_insertion_point(field_get:ControlPackage.field_side)
  return static_cast< ::ControlPackage_FieldSide >(field_side_);
}
inline void ControlPackage::set_field_side(::ControlPackage_FieldSide value) {
  assert(::ControlPackage_FieldSide_IsValid(value));
  set_has_field_side();
  field_side_ = value;
  // @@protoc_insertion_point(field_set:ControlPackage.field_side)
}

// required .ControlPackage.TeamColor team_color = 2;
inline bool ControlPackage::has_team_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlPackage::set_has_team_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlPackage::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlPackage::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::ControlPackage_TeamColor ControlPackage::team_color() const {
  // @@protoc_insertion_point(field_get:ControlPackage.team_color)
  return static_cast< ::ControlPackage_TeamColor >(team_color_);
}
inline void ControlPackage::set_team_color(::ControlPackage_TeamColor value) {
  assert(::ControlPackage_TeamColor_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:ControlPackage.team_color)
}

// required int32 id_GK = 3;
inline bool ControlPackage::has_id_gk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlPackage::set_has_id_gk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlPackage::clear_has_id_gk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlPackage::clear_id_gk() {
  id_gk_ = 0;
  clear_has_id_gk();
}
inline ::google::protobuf::int32 ControlPackage::id_gk() const {
  // @@protoc_insertion_point(field_get:ControlPackage.id_GK)
  return id_gk_;
}
inline void ControlPackage::set_id_gk(::google::protobuf::int32 value) {
  set_has_id_gk();
  id_gk_ = value;
  // @@protoc_insertion_point(field_set:ControlPackage.id_GK)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ControlPackage_FieldSide> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlPackage_FieldSide>() {
  return ::ControlPackage_FieldSide_descriptor();
}
template <> struct is_proto_enum< ::ControlPackage_TeamColor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlPackage_TeamColor>() {
  return ::ControlPackage_TeamColor_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_5fcontrol_2eproto__INCLUDED
