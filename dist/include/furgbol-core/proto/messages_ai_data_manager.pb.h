// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_ai_data_manager.proto

#ifndef PROTOBUF_messages_5fai_5fdata_5fmanager_2eproto__INCLUDED
#define PROTOBUF_messages_5fai_5fdata_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
void protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto();
void protobuf_ShutdownFile_messages_5fai_5fdata_5fmanager_2eproto();

class AIDataManagerPackage;
class AIRobotPackage;
class PathPlanningPackage;

// ===================================================================

class PathPlanningPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PathPlanningPackage) */ {
 public:
  PathPlanningPackage();
  virtual ~PathPlanningPackage();

  PathPlanningPackage(const PathPlanningPackage& from);

  inline PathPlanningPackage& operator=(const PathPlanningPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPlanningPackage& default_instance();

  void Swap(PathPlanningPackage* other);

  // implements Message ----------------------------------------------

  inline PathPlanningPackage* New() const { return New(NULL); }

  PathPlanningPackage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathPlanningPackage& from);
  void MergeFrom(const PathPlanningPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathPlanningPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float x = 1;
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::google::protobuf::RepeatedField< float >&
      x() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x();

  // repeated float y = 2;
  int y_size() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::google::protobuf::RepeatedField< float >&
      y() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y();

  // @@protoc_insertion_point(class_scope:PathPlanningPackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > x_;
  ::google::protobuf::RepeatedField< float > y_;
  friend void  protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  friend void protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_messages_5fai_5fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static PathPlanningPackage* default_instance_;
};
// -------------------------------------------------------------------

class AIRobotPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AIRobotPackage) */ {
 public:
  AIRobotPackage();
  virtual ~AIRobotPackage();

  AIRobotPackage(const AIRobotPackage& from);

  inline AIRobotPackage& operator=(const AIRobotPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AIRobotPackage& default_instance();

  void Swap(AIRobotPackage* other);

  // implements Message ----------------------------------------------

  inline AIRobotPackage* New() const { return New(NULL); }

  AIRobotPackage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AIRobotPackage& from);
  void MergeFrom(const AIRobotPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AIRobotPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float orientation = 4;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  float orientation() const;
  void set_orientation(float value);

  // optional string skill = 5;
  bool has_skill() const;
  void clear_skill();
  static const int kSkillFieldNumber = 5;
  const ::std::string& skill() const;
  void set_skill(const ::std::string& value);
  void set_skill(const char* value);
  void set_skill(const char* value, size_t size);
  ::std::string* mutable_skill();
  ::std::string* release_skill();
  void set_allocated_skill(::std::string* skill);

  // optional string tactic = 6;
  bool has_tactic() const;
  void clear_tactic();
  static const int kTacticFieldNumber = 6;
  const ::std::string& tactic() const;
  void set_tactic(const ::std::string& value);
  void set_tactic(const char* value);
  void set_tactic(const char* value, size_t size);
  ::std::string* mutable_tactic();
  ::std::string* release_tactic();
  void set_allocated_tactic(::std::string* tactic);

  // repeated string sensorialInformation = 7;
  int sensorialinformation_size() const;
  void clear_sensorialinformation();
  static const int kSensorialInformationFieldNumber = 7;
  const ::std::string& sensorialinformation(int index) const;
  ::std::string* mutable_sensorialinformation(int index);
  void set_sensorialinformation(int index, const ::std::string& value);
  void set_sensorialinformation(int index, const char* value);
  void set_sensorialinformation(int index, const char* value, size_t size);
  ::std::string* add_sensorialinformation();
  void add_sensorialinformation(const ::std::string& value);
  void add_sensorialinformation(const char* value);
  void add_sensorialinformation(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sensorialinformation() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sensorialinformation();

  // optional float target_x = 8;
  bool has_target_x() const;
  void clear_target_x();
  static const int kTargetXFieldNumber = 8;
  float target_x() const;
  void set_target_x(float value);

  // optional float target_y = 9;
  bool has_target_y() const;
  void clear_target_y();
  static const int kTargetYFieldNumber = 9;
  float target_y() const;
  void set_target_y(float value);

  // optional .PathPlanningPackage path_planning = 10;
  bool has_path_planning() const;
  void clear_path_planning();
  static const int kPathPlanningFieldNumber = 10;
  const ::PathPlanningPackage& path_planning() const;
  ::PathPlanningPackage* mutable_path_planning();
  ::PathPlanningPackage* release_path_planning();
  void set_allocated_path_planning(::PathPlanningPackage* path_planning);

  // optional float velocity_x = 11;
  bool has_velocity_x() const;
  void clear_velocity_x();
  static const int kVelocityXFieldNumber = 11;
  float velocity_x() const;
  void set_velocity_x(float value);

  // optional float velocity_y = 12;
  bool has_velocity_y() const;
  void clear_velocity_y();
  static const int kVelocityYFieldNumber = 12;
  float velocity_y() const;
  void set_velocity_y(float value);

  // optional float velocity_theta = 13;
  bool has_velocity_theta() const;
  void clear_velocity_theta();
  static const int kVelocityThetaFieldNumber = 13;
  float velocity_theta() const;
  void set_velocity_theta(float value);

  // optional float low_kick = 14;
  bool has_low_kick() const;
  void clear_low_kick();
  static const int kLowKickFieldNumber = 14;
  float low_kick() const;
  void set_low_kick(float value);

  // optional float high_kick = 15;
  bool has_high_kick() const;
  void clear_high_kick();
  static const int kHighKickFieldNumber = 15;
  float high_kick() const;
  void set_high_kick(float value);

  // optional float dribbler = 16;
  bool has_dribbler() const;
  void clear_dribbler();
  static const int kDribblerFieldNumber = 16;
  float dribbler() const;
  void set_dribbler(float value);

  // @@protoc_insertion_point(class_scope:AIRobotPackage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_tactic();
  inline void clear_has_tactic();
  inline void set_has_target_x();
  inline void clear_has_target_x();
  inline void set_has_target_y();
  inline void clear_has_target_y();
  inline void set_has_path_planning();
  inline void clear_has_path_planning();
  inline void set_has_velocity_x();
  inline void clear_has_velocity_x();
  inline void set_has_velocity_y();
  inline void clear_has_velocity_y();
  inline void set_has_velocity_theta();
  inline void clear_has_velocity_theta();
  inline void set_has_low_kick();
  inline void clear_has_low_kick();
  inline void set_has_high_kick();
  inline void clear_has_high_kick();
  inline void set_has_dribbler();
  inline void clear_has_dribbler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  float x_;
  float y_;
  float orientation_;
  ::google::protobuf::internal::ArenaStringPtr skill_;
  ::google::protobuf::internal::ArenaStringPtr tactic_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sensorialinformation_;
  float target_x_;
  float target_y_;
  ::PathPlanningPackage* path_planning_;
  float velocity_x_;
  float velocity_y_;
  float velocity_theta_;
  float low_kick_;
  float high_kick_;
  float dribbler_;
  friend void  protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  friend void protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_messages_5fai_5fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static AIRobotPackage* default_instance_;
};
// -------------------------------------------------------------------

class AIDataManagerPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AIDataManagerPackage) */ {
 public:
  AIDataManagerPackage();
  virtual ~AIDataManagerPackage();

  AIDataManagerPackage(const AIDataManagerPackage& from);

  inline AIDataManagerPackage& operator=(const AIDataManagerPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AIDataManagerPackage& default_instance();

  void Swap(AIDataManagerPackage* other);

  // implements Message ----------------------------------------------

  inline AIDataManagerPackage* New() const { return New(NULL); }

  AIDataManagerPackage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AIDataManagerPackage& from);
  void MergeFrom(const AIDataManagerPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AIDataManagerPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string play = 1;
  bool has_play() const;
  void clear_play();
  static const int kPlayFieldNumber = 1;
  const ::std::string& play() const;
  void set_play(const ::std::string& value);
  void set_play(const char* value);
  void set_play(const char* value, size_t size);
  ::std::string* mutable_play();
  ::std::string* release_play();
  void set_allocated_play(::std::string* play);

  // repeated string world_facts = 2;
  int world_facts_size() const;
  void clear_world_facts();
  static const int kWorldFactsFieldNumber = 2;
  const ::std::string& world_facts(int index) const;
  ::std::string* mutable_world_facts(int index);
  void set_world_facts(int index, const ::std::string& value);
  void set_world_facts(int index, const char* value);
  void set_world_facts(int index, const char* value, size_t size);
  ::std::string* add_world_facts();
  void add_world_facts(const ::std::string& value);
  void add_world_facts(const char* value);
  void add_world_facts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& world_facts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_world_facts();

  // repeated .AIRobotPackage team = 3;
  int team_size() const;
  void clear_team();
  static const int kTeamFieldNumber = 3;
  const ::AIRobotPackage& team(int index) const;
  ::AIRobotPackage* mutable_team(int index);
  ::AIRobotPackage* add_team();
  ::google::protobuf::RepeatedPtrField< ::AIRobotPackage >*
      mutable_team();
  const ::google::protobuf::RepeatedPtrField< ::AIRobotPackage >&
      team() const;

  // @@protoc_insertion_point(class_scope:AIDataManagerPackage)
 private:
  inline void set_has_play();
  inline void clear_has_play();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr play_;
  ::google::protobuf::RepeatedPtrField< ::std::string> world_facts_;
  ::google::protobuf::RepeatedPtrField< ::AIRobotPackage > team_;
  friend void  protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  friend void protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_messages_5fai_5fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static AIDataManagerPackage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPlanningPackage

// repeated float x = 1;
inline int PathPlanningPackage::x_size() const {
  return x_.size();
}
inline void PathPlanningPackage::clear_x() {
  x_.Clear();
}
inline float PathPlanningPackage::x(int index) const {
  // @@protoc_insertion_point(field_get:PathPlanningPackage.x)
  return x_.Get(index);
}
inline void PathPlanningPackage::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:PathPlanningPackage.x)
}
inline void PathPlanningPackage::add_x(float value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:PathPlanningPackage.x)
}
inline const ::google::protobuf::RepeatedField< float >&
PathPlanningPackage::x() const {
  // @@protoc_insertion_point(field_list:PathPlanningPackage.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
PathPlanningPackage::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:PathPlanningPackage.x)
  return &x_;
}

// repeated float y = 2;
inline int PathPlanningPackage::y_size() const {
  return y_.size();
}
inline void PathPlanningPackage::clear_y() {
  y_.Clear();
}
inline float PathPlanningPackage::y(int index) const {
  // @@protoc_insertion_point(field_get:PathPlanningPackage.y)
  return y_.Get(index);
}
inline void PathPlanningPackage::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:PathPlanningPackage.y)
}
inline void PathPlanningPackage::add_y(float value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:PathPlanningPackage.y)
}
inline const ::google::protobuf::RepeatedField< float >&
PathPlanningPackage::y() const {
  // @@protoc_insertion_point(field_list:PathPlanningPackage.y)
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
PathPlanningPackage::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:PathPlanningPackage.y)
  return &y_;
}

// -------------------------------------------------------------------

// AIRobotPackage

// optional uint32 id = 1;
inline bool AIRobotPackage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AIRobotPackage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AIRobotPackage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AIRobotPackage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AIRobotPackage::id() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.id)
  return id_;
}
inline void AIRobotPackage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.id)
}

// optional float x = 2;
inline bool AIRobotPackage::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AIRobotPackage::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AIRobotPackage::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AIRobotPackage::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float AIRobotPackage::x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.x)
  return x_;
}
inline void AIRobotPackage::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.x)
}

// optional float y = 3;
inline bool AIRobotPackage::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AIRobotPackage::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AIRobotPackage::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AIRobotPackage::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float AIRobotPackage::y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.y)
  return y_;
}
inline void AIRobotPackage::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.y)
}

// optional float orientation = 4;
inline bool AIRobotPackage::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AIRobotPackage::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AIRobotPackage::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AIRobotPackage::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline float AIRobotPackage::orientation() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.orientation)
  return orientation_;
}
inline void AIRobotPackage::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.orientation)
}

// optional string skill = 5;
inline bool AIRobotPackage::has_skill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AIRobotPackage::set_has_skill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AIRobotPackage::clear_has_skill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AIRobotPackage::clear_skill() {
  skill_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_skill();
}
inline const ::std::string& AIRobotPackage::skill() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.skill)
  return skill_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIRobotPackage::set_skill(const ::std::string& value) {
  set_has_skill();
  skill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.skill)
}
inline void AIRobotPackage::set_skill(const char* value) {
  set_has_skill();
  skill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.skill)
}
inline void AIRobotPackage::set_skill(const char* value, size_t size) {
  set_has_skill();
  skill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.skill)
}
inline ::std::string* AIRobotPackage::mutable_skill() {
  set_has_skill();
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.skill)
  return skill_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIRobotPackage::release_skill() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.skill)
  clear_has_skill();
  return skill_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIRobotPackage::set_allocated_skill(::std::string* skill) {
  if (skill != NULL) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  skill_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill);
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.skill)
}

// optional string tactic = 6;
inline bool AIRobotPackage::has_tactic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AIRobotPackage::set_has_tactic() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AIRobotPackage::clear_has_tactic() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AIRobotPackage::clear_tactic() {
  tactic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tactic();
}
inline const ::std::string& AIRobotPackage::tactic() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.tactic)
  return tactic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIRobotPackage::set_tactic(const ::std::string& value) {
  set_has_tactic();
  tactic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.tactic)
}
inline void AIRobotPackage::set_tactic(const char* value) {
  set_has_tactic();
  tactic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.tactic)
}
inline void AIRobotPackage::set_tactic(const char* value, size_t size) {
  set_has_tactic();
  tactic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.tactic)
}
inline ::std::string* AIRobotPackage::mutable_tactic() {
  set_has_tactic();
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.tactic)
  return tactic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIRobotPackage::release_tactic() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.tactic)
  clear_has_tactic();
  return tactic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIRobotPackage::set_allocated_tactic(::std::string* tactic) {
  if (tactic != NULL) {
    set_has_tactic();
  } else {
    clear_has_tactic();
  }
  tactic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tactic);
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.tactic)
}

// repeated string sensorialInformation = 7;
inline int AIRobotPackage::sensorialinformation_size() const {
  return sensorialinformation_.size();
}
inline void AIRobotPackage::clear_sensorialinformation() {
  sensorialinformation_.Clear();
}
inline const ::std::string& AIRobotPackage::sensorialinformation(int index) const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.sensorialInformation)
  return sensorialinformation_.Get(index);
}
inline ::std::string* AIRobotPackage::mutable_sensorialinformation(int index) {
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.sensorialInformation)
  return sensorialinformation_.Mutable(index);
}
inline void AIRobotPackage::set_sensorialinformation(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AIRobotPackage.sensorialInformation)
  sensorialinformation_.Mutable(index)->assign(value);
}
inline void AIRobotPackage::set_sensorialinformation(int index, const char* value) {
  sensorialinformation_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.sensorialInformation)
}
inline void AIRobotPackage::set_sensorialinformation(int index, const char* value, size_t size) {
  sensorialinformation_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.sensorialInformation)
}
inline ::std::string* AIRobotPackage::add_sensorialinformation() {
  // @@protoc_insertion_point(field_add_mutable:AIRobotPackage.sensorialInformation)
  return sensorialinformation_.Add();
}
inline void AIRobotPackage::add_sensorialinformation(const ::std::string& value) {
  sensorialinformation_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AIRobotPackage.sensorialInformation)
}
inline void AIRobotPackage::add_sensorialinformation(const char* value) {
  sensorialinformation_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AIRobotPackage.sensorialInformation)
}
inline void AIRobotPackage::add_sensorialinformation(const char* value, size_t size) {
  sensorialinformation_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AIRobotPackage.sensorialInformation)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AIRobotPackage::sensorialinformation() const {
  // @@protoc_insertion_point(field_list:AIRobotPackage.sensorialInformation)
  return sensorialinformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AIRobotPackage::mutable_sensorialinformation() {
  // @@protoc_insertion_point(field_mutable_list:AIRobotPackage.sensorialInformation)
  return &sensorialinformation_;
}

// optional float target_x = 8;
inline bool AIRobotPackage::has_target_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AIRobotPackage::set_has_target_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AIRobotPackage::clear_has_target_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AIRobotPackage::clear_target_x() {
  target_x_ = 0;
  clear_has_target_x();
}
inline float AIRobotPackage::target_x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.target_x)
  return target_x_;
}
inline void AIRobotPackage::set_target_x(float value) {
  set_has_target_x();
  target_x_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.target_x)
}

// optional float target_y = 9;
inline bool AIRobotPackage::has_target_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AIRobotPackage::set_has_target_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AIRobotPackage::clear_has_target_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AIRobotPackage::clear_target_y() {
  target_y_ = 0;
  clear_has_target_y();
}
inline float AIRobotPackage::target_y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.target_y)
  return target_y_;
}
inline void AIRobotPackage::set_target_y(float value) {
  set_has_target_y();
  target_y_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.target_y)
}

// optional .PathPlanningPackage path_planning = 10;
inline bool AIRobotPackage::has_path_planning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AIRobotPackage::set_has_path_planning() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AIRobotPackage::clear_has_path_planning() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AIRobotPackage::clear_path_planning() {
  if (path_planning_ != NULL) path_planning_->::PathPlanningPackage::Clear();
  clear_has_path_planning();
}
inline const ::PathPlanningPackage& AIRobotPackage::path_planning() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.path_planning)
  return path_planning_ != NULL ? *path_planning_ : *default_instance_->path_planning_;
}
inline ::PathPlanningPackage* AIRobotPackage::mutable_path_planning() {
  set_has_path_planning();
  if (path_planning_ == NULL) {
    path_planning_ = new ::PathPlanningPackage;
  }
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.path_planning)
  return path_planning_;
}
inline ::PathPlanningPackage* AIRobotPackage::release_path_planning() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.path_planning)
  clear_has_path_planning();
  ::PathPlanningPackage* temp = path_planning_;
  path_planning_ = NULL;
  return temp;
}
inline void AIRobotPackage::set_allocated_path_planning(::PathPlanningPackage* path_planning) {
  delete path_planning_;
  path_planning_ = path_planning;
  if (path_planning) {
    set_has_path_planning();
  } else {
    clear_has_path_planning();
  }
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.path_planning)
}

// optional float velocity_x = 11;
inline bool AIRobotPackage::has_velocity_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AIRobotPackage::set_has_velocity_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AIRobotPackage::clear_has_velocity_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AIRobotPackage::clear_velocity_x() {
  velocity_x_ = 0;
  clear_has_velocity_x();
}
inline float AIRobotPackage::velocity_x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_x)
  return velocity_x_;
}
inline void AIRobotPackage::set_velocity_x(float value) {
  set_has_velocity_x();
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_x)
}

// optional float velocity_y = 12;
inline bool AIRobotPackage::has_velocity_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AIRobotPackage::set_has_velocity_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AIRobotPackage::clear_has_velocity_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AIRobotPackage::clear_velocity_y() {
  velocity_y_ = 0;
  clear_has_velocity_y();
}
inline float AIRobotPackage::velocity_y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_y)
  return velocity_y_;
}
inline void AIRobotPackage::set_velocity_y(float value) {
  set_has_velocity_y();
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_y)
}

// optional float velocity_theta = 13;
inline bool AIRobotPackage::has_velocity_theta() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AIRobotPackage::set_has_velocity_theta() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AIRobotPackage::clear_has_velocity_theta() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AIRobotPackage::clear_velocity_theta() {
  velocity_theta_ = 0;
  clear_has_velocity_theta();
}
inline float AIRobotPackage::velocity_theta() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_theta)
  return velocity_theta_;
}
inline void AIRobotPackage::set_velocity_theta(float value) {
  set_has_velocity_theta();
  velocity_theta_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_theta)
}

// optional float low_kick = 14;
inline bool AIRobotPackage::has_low_kick() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AIRobotPackage::set_has_low_kick() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AIRobotPackage::clear_has_low_kick() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AIRobotPackage::clear_low_kick() {
  low_kick_ = 0;
  clear_has_low_kick();
}
inline float AIRobotPackage::low_kick() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.low_kick)
  return low_kick_;
}
inline void AIRobotPackage::set_low_kick(float value) {
  set_has_low_kick();
  low_kick_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.low_kick)
}

// optional float high_kick = 15;
inline bool AIRobotPackage::has_high_kick() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AIRobotPackage::set_has_high_kick() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AIRobotPackage::clear_has_high_kick() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AIRobotPackage::clear_high_kick() {
  high_kick_ = 0;
  clear_has_high_kick();
}
inline float AIRobotPackage::high_kick() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.high_kick)
  return high_kick_;
}
inline void AIRobotPackage::set_high_kick(float value) {
  set_has_high_kick();
  high_kick_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.high_kick)
}

// optional float dribbler = 16;
inline bool AIRobotPackage::has_dribbler() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AIRobotPackage::set_has_dribbler() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AIRobotPackage::clear_has_dribbler() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AIRobotPackage::clear_dribbler() {
  dribbler_ = 0;
  clear_has_dribbler();
}
inline float AIRobotPackage::dribbler() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.dribbler)
  return dribbler_;
}
inline void AIRobotPackage::set_dribbler(float value) {
  set_has_dribbler();
  dribbler_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.dribbler)
}

// -------------------------------------------------------------------

// AIDataManagerPackage

// optional string play = 1;
inline bool AIDataManagerPackage::has_play() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AIDataManagerPackage::set_has_play() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AIDataManagerPackage::clear_has_play() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AIDataManagerPackage::clear_play() {
  play_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_play();
}
inline const ::std::string& AIDataManagerPackage::play() const {
  // @@protoc_insertion_point(field_get:AIDataManagerPackage.play)
  return play_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIDataManagerPackage::set_play(const ::std::string& value) {
  set_has_play();
  play_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AIDataManagerPackage.play)
}
inline void AIDataManagerPackage::set_play(const char* value) {
  set_has_play();
  play_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIDataManagerPackage.play)
}
inline void AIDataManagerPackage::set_play(const char* value, size_t size) {
  set_has_play();
  play_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIDataManagerPackage.play)
}
inline ::std::string* AIDataManagerPackage::mutable_play() {
  set_has_play();
  // @@protoc_insertion_point(field_mutable:AIDataManagerPackage.play)
  return play_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIDataManagerPackage::release_play() {
  // @@protoc_insertion_point(field_release:AIDataManagerPackage.play)
  clear_has_play();
  return play_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIDataManagerPackage::set_allocated_play(::std::string* play) {
  if (play != NULL) {
    set_has_play();
  } else {
    clear_has_play();
  }
  play_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), play);
  // @@protoc_insertion_point(field_set_allocated:AIDataManagerPackage.play)
}

// repeated string world_facts = 2;
inline int AIDataManagerPackage::world_facts_size() const {
  return world_facts_.size();
}
inline void AIDataManagerPackage::clear_world_facts() {
  world_facts_.Clear();
}
inline const ::std::string& AIDataManagerPackage::world_facts(int index) const {
  // @@protoc_insertion_point(field_get:AIDataManagerPackage.world_facts)
  return world_facts_.Get(index);
}
inline ::std::string* AIDataManagerPackage::mutable_world_facts(int index) {
  // @@protoc_insertion_point(field_mutable:AIDataManagerPackage.world_facts)
  return world_facts_.Mutable(index);
}
inline void AIDataManagerPackage::set_world_facts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AIDataManagerPackage.world_facts)
  world_facts_.Mutable(index)->assign(value);
}
inline void AIDataManagerPackage::set_world_facts(int index, const char* value) {
  world_facts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AIDataManagerPackage.world_facts)
}
inline void AIDataManagerPackage::set_world_facts(int index, const char* value, size_t size) {
  world_facts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AIDataManagerPackage.world_facts)
}
inline ::std::string* AIDataManagerPackage::add_world_facts() {
  // @@protoc_insertion_point(field_add_mutable:AIDataManagerPackage.world_facts)
  return world_facts_.Add();
}
inline void AIDataManagerPackage::add_world_facts(const ::std::string& value) {
  world_facts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AIDataManagerPackage.world_facts)
}
inline void AIDataManagerPackage::add_world_facts(const char* value) {
  world_facts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AIDataManagerPackage.world_facts)
}
inline void AIDataManagerPackage::add_world_facts(const char* value, size_t size) {
  world_facts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AIDataManagerPackage.world_facts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AIDataManagerPackage::world_facts() const {
  // @@protoc_insertion_point(field_list:AIDataManagerPackage.world_facts)
  return world_facts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AIDataManagerPackage::mutable_world_facts() {
  // @@protoc_insertion_point(field_mutable_list:AIDataManagerPackage.world_facts)
  return &world_facts_;
}

// repeated .AIRobotPackage team = 3;
inline int AIDataManagerPackage::team_size() const {
  return team_.size();
}
inline void AIDataManagerPackage::clear_team() {
  team_.Clear();
}
inline const ::AIRobotPackage& AIDataManagerPackage::team(int index) const {
  // @@protoc_insertion_point(field_get:AIDataManagerPackage.team)
  return team_.Get(index);
}
inline ::AIRobotPackage* AIDataManagerPackage::mutable_team(int index) {
  // @@protoc_insertion_point(field_mutable:AIDataManagerPackage.team)
  return team_.Mutable(index);
}
inline ::AIRobotPackage* AIDataManagerPackage::add_team() {
  // @@protoc_insertion_point(field_add:AIDataManagerPackage.team)
  return team_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AIRobotPackage >*
AIDataManagerPackage::mutable_team() {
  // @@protoc_insertion_point(field_mutable_list:AIDataManagerPackage.team)
  return &team_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AIRobotPackage >&
AIDataManagerPackage::team() const {
  // @@protoc_insertion_point(field_list:AIDataManagerPackage.team)
  return team_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_5fai_5fdata_5fmanager_2eproto__INCLUDED
