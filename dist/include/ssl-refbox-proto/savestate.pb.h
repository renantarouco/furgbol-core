// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: savestate.proto

#ifndef PROTOBUF_savestate_2eproto__INCLUDED
#define PROTOBUF_savestate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "referee.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_savestate_2eproto();
void protobuf_AssignDesc_savestate_2eproto();
void protobuf_ShutdownFile_savestate_2eproto();

class SaveState;
class SaveState_CardInfo;
class SaveState_TimeoutInfo;

enum SaveState_Team {
  SaveState_Team_TEAM_YELLOW = 0,
  SaveState_Team_TEAM_BLUE = 1
};
bool SaveState_Team_IsValid(int value);
const SaveState_Team SaveState_Team_Team_MIN = SaveState_Team_TEAM_YELLOW;
const SaveState_Team SaveState_Team_Team_MAX = SaveState_Team_TEAM_BLUE;
const int SaveState_Team_Team_ARRAYSIZE = SaveState_Team_Team_MAX + 1;

const ::google::protobuf::EnumDescriptor* SaveState_Team_descriptor();
inline const ::std::string& SaveState_Team_Name(SaveState_Team value) {
  return ::google::protobuf::internal::NameOfEnum(
    SaveState_Team_descriptor(), value);
}
inline bool SaveState_Team_Parse(
    const ::std::string& name, SaveState_Team* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaveState_Team>(
    SaveState_Team_descriptor(), name, value);
}
enum SaveState_Card {
  SaveState_Card_CARD_YELLOW = 0,
  SaveState_Card_CARD_RED = 1
};
bool SaveState_Card_IsValid(int value);
const SaveState_Card SaveState_Card_Card_MIN = SaveState_Card_CARD_YELLOW;
const SaveState_Card SaveState_Card_Card_MAX = SaveState_Card_CARD_RED;
const int SaveState_Card_Card_ARRAYSIZE = SaveState_Card_Card_MAX + 1;

const ::google::protobuf::EnumDescriptor* SaveState_Card_descriptor();
inline const ::std::string& SaveState_Card_Name(SaveState_Card value) {
  return ::google::protobuf::internal::NameOfEnum(
    SaveState_Card_descriptor(), value);
}
inline bool SaveState_Card_Parse(
    const ::std::string& name, SaveState_Card* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaveState_Card>(
    SaveState_Card_descriptor(), name, value);
}
// ===================================================================

class SaveState_CardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SaveState.CardInfo) */ {
 public:
  SaveState_CardInfo();
  virtual ~SaveState_CardInfo();

  SaveState_CardInfo(const SaveState_CardInfo& from);

  inline SaveState_CardInfo& operator=(const SaveState_CardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveState_CardInfo& default_instance();

  void Swap(SaveState_CardInfo* other);

  // implements Message ----------------------------------------------

  inline SaveState_CardInfo* New() const { return New(NULL); }

  SaveState_CardInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveState_CardInfo& from);
  void MergeFrom(const SaveState_CardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaveState_CardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SaveState.Team team = 1;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::SaveState_Team team() const;
  void set_team(::SaveState_Team value);

  // required .SaveState.Card card = 2;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 2;
  ::SaveState_Card card() const;
  void set_card(::SaveState_Card value);

  // @@protoc_insertion_point(class_scope:SaveState.CardInfo)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_card();
  inline void clear_has_card();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int team_;
  int card_;
  friend void  protobuf_AddDesc_savestate_2eproto();
  friend void protobuf_AssignDesc_savestate_2eproto();
  friend void protobuf_ShutdownFile_savestate_2eproto();

  void InitAsDefaultInstance();
  static SaveState_CardInfo* default_instance_;
};
// -------------------------------------------------------------------

class SaveState_TimeoutInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SaveState.TimeoutInfo) */ {
 public:
  SaveState_TimeoutInfo();
  virtual ~SaveState_TimeoutInfo();

  SaveState_TimeoutInfo(const SaveState_TimeoutInfo& from);

  inline SaveState_TimeoutInfo& operator=(const SaveState_TimeoutInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveState_TimeoutInfo& default_instance();

  void Swap(SaveState_TimeoutInfo* other);

  // implements Message ----------------------------------------------

  inline SaveState_TimeoutInfo* New() const { return New(NULL); }

  SaveState_TimeoutInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveState_TimeoutInfo& from);
  void MergeFrom(const SaveState_TimeoutInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaveState_TimeoutInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SaveState.Team team = 1;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::SaveState_Team team() const;
  void set_team(::SaveState_Team value);

  // required uint32 left_before = 2;
  bool has_left_before() const;
  void clear_left_before();
  static const int kLeftBeforeFieldNumber = 2;
  ::google::protobuf::uint32 left_before() const;
  void set_left_before(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SaveState.TimeoutInfo)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_left_before();
  inline void clear_has_left_before();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int team_;
  ::google::protobuf::uint32 left_before_;
  friend void  protobuf_AddDesc_savestate_2eproto();
  friend void protobuf_AssignDesc_savestate_2eproto();
  friend void protobuf_ShutdownFile_savestate_2eproto();

  void InitAsDefaultInstance();
  static SaveState_TimeoutInfo* default_instance_;
};
// -------------------------------------------------------------------

class SaveState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SaveState) */ {
 public:
  SaveState();
  virtual ~SaveState();

  SaveState(const SaveState& from);

  inline SaveState& operator=(const SaveState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveState& default_instance();

  void Swap(SaveState* other);

  // implements Message ----------------------------------------------

  inline SaveState* New() const { return New(NULL); }

  SaveState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveState& from);
  void MergeFrom(const SaveState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaveState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SaveState_CardInfo CardInfo;
  typedef SaveState_TimeoutInfo TimeoutInfo;

  typedef SaveState_Team Team;
  static const Team TEAM_YELLOW =
    SaveState_Team_TEAM_YELLOW;
  static const Team TEAM_BLUE =
    SaveState_Team_TEAM_BLUE;
  static inline bool Team_IsValid(int value) {
    return SaveState_Team_IsValid(value);
  }
  static const Team Team_MIN =
    SaveState_Team_Team_MIN;
  static const Team Team_MAX =
    SaveState_Team_Team_MAX;
  static const int Team_ARRAYSIZE =
    SaveState_Team_Team_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Team_descriptor() {
    return SaveState_Team_descriptor();
  }
  static inline const ::std::string& Team_Name(Team value) {
    return SaveState_Team_Name(value);
  }
  static inline bool Team_Parse(const ::std::string& name,
      Team* value) {
    return SaveState_Team_Parse(name, value);
  }

  typedef SaveState_Card Card;
  static const Card CARD_YELLOW =
    SaveState_Card_CARD_YELLOW;
  static const Card CARD_RED =
    SaveState_Card_CARD_RED;
  static inline bool Card_IsValid(int value) {
    return SaveState_Card_IsValid(value);
  }
  static const Card Card_MIN =
    SaveState_Card_Card_MIN;
  static const Card Card_MAX =
    SaveState_Card_Card_MAX;
  static const int Card_ARRAYSIZE =
    SaveState_Card_Card_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Card_descriptor() {
    return SaveState_Card_descriptor();
  }
  static inline const ::std::string& Card_Name(Card value) {
    return SaveState_Card_Name(value);
  }
  static inline bool Card_Parse(const ::std::string& name,
      Card* value) {
    return SaveState_Card_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .SSL_Referee referee = 1;
  bool has_referee() const;
  void clear_referee();
  static const int kRefereeFieldNumber = 1;
  const ::SSL_Referee& referee() const;
  ::SSL_Referee* mutable_referee();
  ::SSL_Referee* release_referee();
  void set_allocated_referee(::SSL_Referee* referee);

  // required uint32 yellow_penalty_goals = 2;
  bool has_yellow_penalty_goals() const;
  void clear_yellow_penalty_goals();
  static const int kYellowPenaltyGoalsFieldNumber = 2;
  ::google::protobuf::uint32 yellow_penalty_goals() const;
  void set_yellow_penalty_goals(::google::protobuf::uint32 value);

  // required uint32 blue_penalty_goals = 3;
  bool has_blue_penalty_goals() const;
  void clear_blue_penalty_goals();
  static const int kBluePenaltyGoalsFieldNumber = 3;
  ::google::protobuf::uint32 blue_penalty_goals() const;
  void set_blue_penalty_goals(::google::protobuf::uint32 value);

  // required uint64 time_taken = 4;
  bool has_time_taken() const;
  void clear_time_taken();
  static const int kTimeTakenFieldNumber = 4;
  ::google::protobuf::uint64 time_taken() const;
  void set_time_taken(::google::protobuf::uint64 value);

  // optional .SaveState.CardInfo last_card = 5;
  bool has_last_card() const;
  void clear_last_card();
  static const int kLastCardFieldNumber = 5;
  const ::SaveState_CardInfo& last_card() const;
  ::SaveState_CardInfo* mutable_last_card();
  ::SaveState_CardInfo* release_last_card();
  void set_allocated_last_card(::SaveState_CardInfo* last_card);

  // optional .SaveState.TimeoutInfo timeout = 6;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 6;
  const ::SaveState_TimeoutInfo& timeout() const;
  ::SaveState_TimeoutInfo* mutable_timeout();
  ::SaveState_TimeoutInfo* release_timeout();
  void set_allocated_timeout(::SaveState_TimeoutInfo* timeout);

  // optional .SaveState.TimeoutInfo last_timeout = 7;
  bool has_last_timeout() const;
  void clear_last_timeout();
  static const int kLastTimeoutFieldNumber = 7;
  const ::SaveState_TimeoutInfo& last_timeout() const;
  ::SaveState_TimeoutInfo* mutable_last_timeout();
  ::SaveState_TimeoutInfo* release_last_timeout();
  void set_allocated_last_timeout(::SaveState_TimeoutInfo* last_timeout);

  // @@protoc_insertion_point(class_scope:SaveState)
 private:
  inline void set_has_referee();
  inline void clear_has_referee();
  inline void set_has_yellow_penalty_goals();
  inline void clear_has_yellow_penalty_goals();
  inline void set_has_blue_penalty_goals();
  inline void clear_has_blue_penalty_goals();
  inline void set_has_time_taken();
  inline void clear_has_time_taken();
  inline void set_has_last_card();
  inline void clear_has_last_card();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_last_timeout();
  inline void clear_has_last_timeout();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SSL_Referee* referee_;
  ::google::protobuf::uint32 yellow_penalty_goals_;
  ::google::protobuf::uint32 blue_penalty_goals_;
  ::google::protobuf::uint64 time_taken_;
  ::SaveState_CardInfo* last_card_;
  ::SaveState_TimeoutInfo* timeout_;
  ::SaveState_TimeoutInfo* last_timeout_;
  friend void  protobuf_AddDesc_savestate_2eproto();
  friend void protobuf_AssignDesc_savestate_2eproto();
  friend void protobuf_ShutdownFile_savestate_2eproto();

  void InitAsDefaultInstance();
  static SaveState* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SaveState_CardInfo

// required .SaveState.Team team = 1;
inline bool SaveState_CardInfo::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveState_CardInfo::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveState_CardInfo::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveState_CardInfo::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::SaveState_Team SaveState_CardInfo::team() const {
  // @@protoc_insertion_point(field_get:SaveState.CardInfo.team)
  return static_cast< ::SaveState_Team >(team_);
}
inline void SaveState_CardInfo::set_team(::SaveState_Team value) {
  assert(::SaveState_Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:SaveState.CardInfo.team)
}

// required .SaveState.Card card = 2;
inline bool SaveState_CardInfo::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveState_CardInfo::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveState_CardInfo::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveState_CardInfo::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::SaveState_Card SaveState_CardInfo::card() const {
  // @@protoc_insertion_point(field_get:SaveState.CardInfo.card)
  return static_cast< ::SaveState_Card >(card_);
}
inline void SaveState_CardInfo::set_card(::SaveState_Card value) {
  assert(::SaveState_Card_IsValid(value));
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:SaveState.CardInfo.card)
}

// -------------------------------------------------------------------

// SaveState_TimeoutInfo

// required .SaveState.Team team = 1;
inline bool SaveState_TimeoutInfo::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveState_TimeoutInfo::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveState_TimeoutInfo::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveState_TimeoutInfo::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::SaveState_Team SaveState_TimeoutInfo::team() const {
  // @@protoc_insertion_point(field_get:SaveState.TimeoutInfo.team)
  return static_cast< ::SaveState_Team >(team_);
}
inline void SaveState_TimeoutInfo::set_team(::SaveState_Team value) {
  assert(::SaveState_Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:SaveState.TimeoutInfo.team)
}

// required uint32 left_before = 2;
inline bool SaveState_TimeoutInfo::has_left_before() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveState_TimeoutInfo::set_has_left_before() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveState_TimeoutInfo::clear_has_left_before() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveState_TimeoutInfo::clear_left_before() {
  left_before_ = 0u;
  clear_has_left_before();
}
inline ::google::protobuf::uint32 SaveState_TimeoutInfo::left_before() const {
  // @@protoc_insertion_point(field_get:SaveState.TimeoutInfo.left_before)
  return left_before_;
}
inline void SaveState_TimeoutInfo::set_left_before(::google::protobuf::uint32 value) {
  set_has_left_before();
  left_before_ = value;
  // @@protoc_insertion_point(field_set:SaveState.TimeoutInfo.left_before)
}

// -------------------------------------------------------------------

// SaveState

// required .SSL_Referee referee = 1;
inline bool SaveState::has_referee() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveState::set_has_referee() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveState::clear_has_referee() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveState::clear_referee() {
  if (referee_ != NULL) referee_->::SSL_Referee::Clear();
  clear_has_referee();
}
inline const ::SSL_Referee& SaveState::referee() const {
  // @@protoc_insertion_point(field_get:SaveState.referee)
  return referee_ != NULL ? *referee_ : *default_instance_->referee_;
}
inline ::SSL_Referee* SaveState::mutable_referee() {
  set_has_referee();
  if (referee_ == NULL) {
    referee_ = new ::SSL_Referee;
  }
  // @@protoc_insertion_point(field_mutable:SaveState.referee)
  return referee_;
}
inline ::SSL_Referee* SaveState::release_referee() {
  // @@protoc_insertion_point(field_release:SaveState.referee)
  clear_has_referee();
  ::SSL_Referee* temp = referee_;
  referee_ = NULL;
  return temp;
}
inline void SaveState::set_allocated_referee(::SSL_Referee* referee) {
  delete referee_;
  referee_ = referee;
  if (referee) {
    set_has_referee();
  } else {
    clear_has_referee();
  }
  // @@protoc_insertion_point(field_set_allocated:SaveState.referee)
}

// required uint32 yellow_penalty_goals = 2;
inline bool SaveState::has_yellow_penalty_goals() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveState::set_has_yellow_penalty_goals() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveState::clear_has_yellow_penalty_goals() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveState::clear_yellow_penalty_goals() {
  yellow_penalty_goals_ = 0u;
  clear_has_yellow_penalty_goals();
}
inline ::google::protobuf::uint32 SaveState::yellow_penalty_goals() const {
  // @@protoc_insertion_point(field_get:SaveState.yellow_penalty_goals)
  return yellow_penalty_goals_;
}
inline void SaveState::set_yellow_penalty_goals(::google::protobuf::uint32 value) {
  set_has_yellow_penalty_goals();
  yellow_penalty_goals_ = value;
  // @@protoc_insertion_point(field_set:SaveState.yellow_penalty_goals)
}

// required uint32 blue_penalty_goals = 3;
inline bool SaveState::has_blue_penalty_goals() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveState::set_has_blue_penalty_goals() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveState::clear_has_blue_penalty_goals() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveState::clear_blue_penalty_goals() {
  blue_penalty_goals_ = 0u;
  clear_has_blue_penalty_goals();
}
inline ::google::protobuf::uint32 SaveState::blue_penalty_goals() const {
  // @@protoc_insertion_point(field_get:SaveState.blue_penalty_goals)
  return blue_penalty_goals_;
}
inline void SaveState::set_blue_penalty_goals(::google::protobuf::uint32 value) {
  set_has_blue_penalty_goals();
  blue_penalty_goals_ = value;
  // @@protoc_insertion_point(field_set:SaveState.blue_penalty_goals)
}

// required uint64 time_taken = 4;
inline bool SaveState::has_time_taken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveState::set_has_time_taken() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveState::clear_has_time_taken() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveState::clear_time_taken() {
  time_taken_ = GOOGLE_ULONGLONG(0);
  clear_has_time_taken();
}
inline ::google::protobuf::uint64 SaveState::time_taken() const {
  // @@protoc_insertion_point(field_get:SaveState.time_taken)
  return time_taken_;
}
inline void SaveState::set_time_taken(::google::protobuf::uint64 value) {
  set_has_time_taken();
  time_taken_ = value;
  // @@protoc_insertion_point(field_set:SaveState.time_taken)
}

// optional .SaveState.CardInfo last_card = 5;
inline bool SaveState::has_last_card() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveState::set_has_last_card() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SaveState::clear_has_last_card() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SaveState::clear_last_card() {
  if (last_card_ != NULL) last_card_->::SaveState_CardInfo::Clear();
  clear_has_last_card();
}
inline const ::SaveState_CardInfo& SaveState::last_card() const {
  // @@protoc_insertion_point(field_get:SaveState.last_card)
  return last_card_ != NULL ? *last_card_ : *default_instance_->last_card_;
}
inline ::SaveState_CardInfo* SaveState::mutable_last_card() {
  set_has_last_card();
  if (last_card_ == NULL) {
    last_card_ = new ::SaveState_CardInfo;
  }
  // @@protoc_insertion_point(field_mutable:SaveState.last_card)
  return last_card_;
}
inline ::SaveState_CardInfo* SaveState::release_last_card() {
  // @@protoc_insertion_point(field_release:SaveState.last_card)
  clear_has_last_card();
  ::SaveState_CardInfo* temp = last_card_;
  last_card_ = NULL;
  return temp;
}
inline void SaveState::set_allocated_last_card(::SaveState_CardInfo* last_card) {
  delete last_card_;
  last_card_ = last_card;
  if (last_card) {
    set_has_last_card();
  } else {
    clear_has_last_card();
  }
  // @@protoc_insertion_point(field_set_allocated:SaveState.last_card)
}

// optional .SaveState.TimeoutInfo timeout = 6;
inline bool SaveState::has_timeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SaveState::set_has_timeout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SaveState::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SaveState::clear_timeout() {
  if (timeout_ != NULL) timeout_->::SaveState_TimeoutInfo::Clear();
  clear_has_timeout();
}
inline const ::SaveState_TimeoutInfo& SaveState::timeout() const {
  // @@protoc_insertion_point(field_get:SaveState.timeout)
  return timeout_ != NULL ? *timeout_ : *default_instance_->timeout_;
}
inline ::SaveState_TimeoutInfo* SaveState::mutable_timeout() {
  set_has_timeout();
  if (timeout_ == NULL) {
    timeout_ = new ::SaveState_TimeoutInfo;
  }
  // @@protoc_insertion_point(field_mutable:SaveState.timeout)
  return timeout_;
}
inline ::SaveState_TimeoutInfo* SaveState::release_timeout() {
  // @@protoc_insertion_point(field_release:SaveState.timeout)
  clear_has_timeout();
  ::SaveState_TimeoutInfo* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline void SaveState::set_allocated_timeout(::SaveState_TimeoutInfo* timeout) {
  delete timeout_;
  timeout_ = timeout;
  if (timeout) {
    set_has_timeout();
  } else {
    clear_has_timeout();
  }
  // @@protoc_insertion_point(field_set_allocated:SaveState.timeout)
}

// optional .SaveState.TimeoutInfo last_timeout = 7;
inline bool SaveState::has_last_timeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SaveState::set_has_last_timeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SaveState::clear_has_last_timeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SaveState::clear_last_timeout() {
  if (last_timeout_ != NULL) last_timeout_->::SaveState_TimeoutInfo::Clear();
  clear_has_last_timeout();
}
inline const ::SaveState_TimeoutInfo& SaveState::last_timeout() const {
  // @@protoc_insertion_point(field_get:SaveState.last_timeout)
  return last_timeout_ != NULL ? *last_timeout_ : *default_instance_->last_timeout_;
}
inline ::SaveState_TimeoutInfo* SaveState::mutable_last_timeout() {
  set_has_last_timeout();
  if (last_timeout_ == NULL) {
    last_timeout_ = new ::SaveState_TimeoutInfo;
  }
  // @@protoc_insertion_point(field_mutable:SaveState.last_timeout)
  return last_timeout_;
}
inline ::SaveState_TimeoutInfo* SaveState::release_last_timeout() {
  // @@protoc_insertion_point(field_release:SaveState.last_timeout)
  clear_has_last_timeout();
  ::SaveState_TimeoutInfo* temp = last_timeout_;
  last_timeout_ = NULL;
  return temp;
}
inline void SaveState::set_allocated_last_timeout(::SaveState_TimeoutInfo* last_timeout) {
  delete last_timeout_;
  last_timeout_ = last_timeout;
  if (last_timeout) {
    set_has_last_timeout();
  } else {
    clear_has_last_timeout();
  }
  // @@protoc_insertion_point(field_set_allocated:SaveState.last_timeout)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SaveState_Team> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SaveState_Team>() {
  return ::SaveState_Team_descriptor();
}
template <> struct is_proto_enum< ::SaveState_Card> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SaveState_Card>() {
  return ::SaveState_Card_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_savestate_2eproto__INCLUDED
